/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(JJTest2)package com.delligattiassociates.jct.test.parser;

public class JJTest2{
  void report(String s)
  {	System.out.printf("Parsed <%s>.\n", s);
  }}PARSER_END(JJTest2)SKIP : { " " | "\r" | "\t" | "\n" | "//" : IN_LINE_COMMENT }
TOKEN: { <T_COMMENT: "/*" > : IN_COMMENT }
<IN_LINE_COMMENT> SKIP: { "\n" : DEFAULT }
<IN_LINE_COMMENT> MORE: { < ~[] > }
<IN_COMMENT> SKIP: { "*/" : DEFAULT }
<IN_COMMENT> MORE: { < ~[] > }

TOKEN : /* Keywords */
{
  <K_ABOUT : "about">
| <K_ABSTRACT: "abstract">
| <K_ALIAS : "alias">
| <K_AS : "as">
| <K_ATTRIBUTE: "attribute">
| <K_BLOCK : "block">
| <K_CLASS : "class">
| <K_COMMENT : "comment">
| <K_DEF: "def" >
| <K_FEATURE : "feature">
| <K_IMPORT : "import">
| <K_NAMESPACE : "namespace">
| <K_PACKAGE : "package">
| <K_PART: "part">
| <K_PRIVATE : "private">
| <K_PUBLIC: "public">
| <K_QUIT: "quit">
| <K_REDEFINES: "redefines">
| <K_REF: "ref">
| <K_SPECIALIZES: "specializes">
| <K_SUBSETS: "subsets">
| <K_TYPE: "type">
| <K_VALUE: "value">
}

TOKEN : /* Operators */ {
  <O_COLON: ":"> | <O_COMMA: ","> | <O_SCOPE: "::"> | <O_SPLAT: "*"> | <O_SPECIALIZES: ":>"> |
  <O_LBRACKET: "["> | <O_RBRACKET: "]"> | <O_TO: ".."> | <O_REDEFINES: ":>>">
}

TOKEN: { <T_LBRACE: "{"> | < T_RBRACE: "}" > }
TOKEN: { <T_IDENTIFIER: <T_SPACE_IDENTIFIER> | <T_NONSPACE_IDENTIFIER>> }
TOKEN: { <T_SCOPED_IDENTIFIER: <T_IDENTIFIER > (<O_SCOPE> <T_IDENTIFIER >)* > }
TOKEN: { <T_SPACE_IDENTIFIER: "'" <LETTER> (<LETTER> | <DIGIT> | " ")* "'"> }

TOKEN: {
  <T_NONSPACE_IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
}

TOKEN: { <T_ORDINAL: (<DIGIT>)+> }

void doc_comment(): {}
{
  <T_COMMENT> {  System.out.println("Scanned a doc comment"); }
}

void named_comment(): {}
{
  <K_COMMENT> <T_IDENTIFIER> doc_comment() { System.out.println("Scanned a named comment"); } 
}

void comment_about(): {}
{
  <K_COMMENT> <K_ABOUT> <T_IDENTIFIER> doc_comment()
}

void maybe_scoped_id() : {}
{
  <T_IDENTIFIER>
| <T_SCOPED_IDENTIFIER >
}

void alias(): {}
{
  <K_ALIAS> maybe_scoped_id() <K_AS> <T_IDENTIFIER> ";"
}

void block(): {}
{
  (<K_ABSTRACT>)? (<K_BLOCK> | <K_PART> <K_DEF>)
}

void specializes(): {}
{
  <K_SPECIALIZES> | <O_SPECIALIZES>
}

void block_decl(): {}
{
  block() <T_IDENTIFIER> (specializes() maybe_scoped_id() (<O_COMMA> maybe_scoped_id())*)? ";"
}

void block_def(): {}
{
  block() <T_IDENTIFIER> (specializes() maybe_scoped_id() (<O_COMMA> maybe_scoped_id())*)? "{" (block_inners())* "}"
}

void block_inners(): {} {
  import_()
| part_decl()
| value_decl()
}

void multiplicity(): {}
{
LOOKAHEAD(3)
  "[" (<T_ORDINAL> | <O_SPLAT>) "]"
| "[" <T_ORDINAL> <O_TO> (<T_ORDINAL> | <O_SPLAT>)"]"
}

void subsets(): {}
{
  (<K_SUBSETS> | <O_SPECIALIZES>)
}

void subsets_id(): {}
{
   subsets() maybe_scoped_id()
}

void redefines(): {}
{
  (<K_REDEFINES> | <O_REDEFINES>) 
}

void redefines_id(): {}
{
  redefines() <T_IDENTIFIER>
}

void part_decl(): {} {
LOOKAHEAD(2)
  (<K_REF>)? <K_PART> <T_IDENTIFIER> ":" maybe_scoped_id() (multiplicity())? (subsets_id() | redefines_id())? ";"
| (<K_REF>)? <K_PART> (subsets() | redefines())? <T_IDENTIFIER> (multiplicity())?  ";"
}

void class_decl(): {} {
  <K_CLASS> <T_IDENTIFIER> "{" "}" ";"
}

void value(): {} { <K_ATTRIBUTE> | <K_VALUE> }

void value_decl(): {} {
  (value())? <T_IDENTIFIER> ":" maybe_scoped_id() ";"  
}

void attribute(): {}
{
  <K_ATTRIBUTE> <K_DEF>
| <K_VALUE> <K_TYPE>
}

void attribute_decl(): {}
{
  attribute() <T_IDENTIFIER> "{" (attribute_inners())* "}"
}

void attribute_inners(): {}
{
  import_()
| value_decl()
}

void import_() :
{}
{
  LOOKAHEAD(3) <K_IMPORT> maybe_scoped_id() ";"
| LOOKAHEAD(3) <K_IMPORT> maybe_scoped_id() <K_AS> <T_IDENTIFIER> ";"
| <K_IMPORT> maybe_scoped_id() <O_SCOPE> <O_SPLAT> ";"
}

void feature() : {}
{
  <K_FEATURE> <T_IDENTIFIER> <O_COLON> <T_IDENTIFIER> ";"
}

void namespace() :
{}
{
  <K_NAMESPACE> <T_IDENTIFIER> "{" lines() "}" ";"
}

void visibility(): {}
{
  <K_PUBLIC> | <K_PRIVATE>
}

void null_statement() : {}
{
  ";"
}

void lines() : {}
{
  (one_line())*
}

void package_() : { }
{
  <K_PACKAGE> <T_IDENTIFIER> "{" (packageable_expr())* "}"
}

void packageable_expr(): {}
{
  (visibility())? packageable_decl()
}

void packageable_decl(): {}
{
  doc_comment()
| LOOKAHEAD(2) named_comment()
| comment_about()
| import_()
| block_decl()
| alias()
}

void one_line(): {}
{
  ";" {  System.out.println("That was an empty line!"); }
| LOOKAHEAD(8) block_def() { report("block definition"); }
| LOOKAHEAD(2) block_decl() { report("block declaration"); }
| alias() {  report("alias"); }
| LOOKAHEAD(2) value_decl() { report("value declaration"); }
| attribute_decl() { report("value type declaration"); }
| class_decl() {  report("class declaration"); }
| LOOKAHEAD(2) named_comment()
| comment_about() { report("about comment"); }
| doc_comment()
| feature() { report("feature"); }
| import_() { report("import"); }
| namespace() { report("namespace"); }
| package_() { report("package"); }
| part_decl() {  report("part declaration"); }
}

void end() : { }
{
  <EOF> | <K_QUIT>
}

void file() :
{}
{
  (one_line())* end()
}